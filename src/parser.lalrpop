use std::sync::Arc;
use crate::ast::{ArithOp, CmpOp, Expr, Func, Program};

grammar;

pub Program: Program = {
    <f:Fn> ";;" <c:Comment*> <p:Program> => {
        let mut p = p;
        p.push(f);
        p.reverse();
        p
    },
    <f:Fn> ";;" => vec![f],
};

// starts with --
Comment: () = {
    r"--[^\n]*" => (),
};

Fn: Func = {
    <i:Id> "(" <p:Params> ")" "->" <e:Expr> => Func {
        name: i,
        args: p,
        body: e,
    },
    <i:Id> "(" ")" "->" <e:Expr> => Func {
        name: i,
        body: e,
        args: vec![],
    },
};

Exprs : Vec<Expr> = {
    <e:Expr> ";" <es:Exprs> => {
        let mut es = es;
        es.push(e);
        es
    },
    <e:Expr> => vec![e],
};

Expr = {
    <Object>,
    <Tuple>,
    <Aexp>,
    <IfElse>,
    <In>,
};

Aexp : Expr = {
    <l:Aexp> "==" <r:Factor> => Expr::CmpOp(Arc::new(l), CmpOp::Eq, Arc::new(r)),
    <l:Aexp> "!=" <r:Factor> => Expr::CmpOp(Arc::new(l), CmpOp::Ne, Arc::new(r)),
    <l:Aexp> "<" <r:Factor> => Expr::CmpOp(Arc::new(l), CmpOp::Lt, Arc::new(r)),
    <l:Aexp> ">" <r:Factor> => Expr::CmpOp(Arc::new(l), CmpOp::Gt, Arc::new(r)),
    <l:Aexp> "<=" <r:Factor> => Expr::CmpOp(Arc::new(l), CmpOp::Le, Arc::new(r)),
    <l:Aexp> ">=" <r:Factor> => Expr::CmpOp(Arc::new(l), CmpOp::Ge, Arc::new(r)),
    Aexp1,
};

Aexp1: Expr = {
    <l:Aexp> "+" <r:Factor> => Expr::ArithOp(Arc::new(l), ArithOp::Add, Arc::new(r)),
    <l:Aexp> "-" <r:Factor> => Expr::ArithOp(Arc::new(l), ArithOp::Sub, Arc::new(r)),
    Factor,
};

Factor: Expr = {
    <l:Factor> "*" <r:Term> => Expr::ArithOp(Arc::new(l), ArithOp::Mul, Arc::new(r)),
    <l:Factor> "/" <r:Term> => Expr::ArithOp(Arc::new(l), ArithOp::Div, Arc::new(r)),
    Term,
};

Term: Expr = {
    Num,
    Var,
    Call,
    Proj,
    Bool,
    "(" <e:Aexp> ")" => e,
};

Num: Expr = {
    r"[0-9]+" => Expr::Num(<>.parse::<i64>().unwrap()),
};

Bool: Expr = {
    "true" => Expr::Bool(true),
    "false" => Expr::Bool(false),
};

Id: String = {
    r"[a-zA-Z_]([a-zA-Z0-9_])*" => <>.to_string(),
}

Var: Expr = {
    <Id> => Expr::Var(<>.to_string()),
};

Args: Vec<Expr> = {
    <e:Expr> "," <a:Args> => {
        let mut a = a;
        a.push(e);
        a
    },
    <e:Expr> => vec![e],
};

Call: Expr = {
    <v:Var> "(" <a:Args> ")" => {
        a.iter().rev().fold(v, |acc, e| {
            Expr::Call(Arc::new(acc), Arc::new(e.clone()))
        })
    },
    <v:Var> "(" ")" => Expr::Call(Arc::new(v), Arc::new(Expr::Unit)),
};

Proj: Expr = {
    <v:Var> "." <p:Num> => Expr::Proj(Arc::new(v), Arc::new(p)),
};

TupleItems: Vec<Expr> = {
    <e:Expr> "," <a:TupleItems> => {
        let mut a = a;
        a.push(e);
        a
    },
    <e:Expr> "," => vec![e],
};

Tuple: Expr = {
    "(" <a:TupleItems> ")" => Expr::Tuple(a),
};

ObjectAttrs: Vec<(String, Expr)> = {
    <v:Id> ":" <e:Expr> "," <o:ObjectAttrs> => {
        let mut o = o;
        o.push((v, e));
        o
    },
    <v:Id> ":" <e:Expr> => vec![(v, e)],
};

Object: Expr = {
    "{" <o:ObjectAttrs> "}" => Expr::Object(o),
};

IfElse: Expr = {
    "if" <c:Aexp> "then" <t:Expr> "else" <e:Expr> => Expr::IfElse(Arc::new(c), Arc::new(t), Arc::new(e)),
};

Assign: Expr = {
    <v:Id> "=" <e:Expr> => Expr::Assign(v, Arc::new(e)),
};

In: Expr = {
    <e1:Assign> "in" <e2:Expr> => Expr::In(Arc::new(e1), Arc::new(e2)),
};

Params: Vec<String> = {
    <i:Id> "," <p:Params> => {
        let mut p = p;
        p.push(i);
        p
    },
    <i:Id> => vec![i],
};

